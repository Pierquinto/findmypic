generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  password            String
  plan                String                @default("free")
  searches            Int                   @default(0)
  searchesResetAt     DateTime              @default(now())
  customSearchLimit   Int?
  role                String                @default("user")
  permissions         Json?
  isActive            Boolean               @default(true)
  isAdmin             Boolean               @default(false)
  lastLoginAt         DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ActivityLog         ActivityLog[]
  CustomSearchRequest CustomSearchRequest[]
  imageTokens         ImageToken[]
  protectedAssets     ProtectedAsset[]
  Search              Search[]
  SearchLog           SearchLog[]
  Subscription        Subscription[]
  profile             UserProfile?
  violations          Violation[]
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  company   String?
  phone     String?
  website   String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProtectedAsset {
  id                  String                  @id @default(cuid())
  userId              String
  name                String
  description         String?
  imageUrl            String
  imageHash           String
  tags                Json?
  monitoringEnabled   Boolean                 @default(true)
  monitoringFrequency String                  @default("weekly")
  lastMonitoredAt     DateTime?
  totalViolations     Int                     @default(0)
  status              String                  @default("active")
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  monitoringResults   AssetMonitoringResult[]
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssetMonitoringResult {
  id                 String         @id @default(cuid())
  protectedAssetId   String
  monitoringDate     DateTime
  violationsFound    Int            @default(0)
  newViolations      Int            @default(0)
  resolvedViolations Int            @default(0)
  results            Json?
  status             String         @default("completed")
  createdAt          DateTime       @default(now())
  protectedAsset     ProtectedAsset @relation(fields: [protectedAssetId], references: [id], onDelete: Cascade)
}

model Search {
  id                 String         @id @default(cuid())
  userId             String?
  imageUrl           String?
  encryptedImagePath String?
  encryptedResults   String?
  searchType         String         @default("general_search")
  providersUsed      Json?
  searchTime         Int?
  resultsCount       Int            @default(0)
  ipAddress          String?
  userAgent          String?
  imageHash          String?
  status             String         @default("completed")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  imageTokens        ImageToken[]
  user               User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchLogs         SearchLog[]
  results            SearchResult[]
}

model SearchResult {
  id         String   @id @default(cuid())
  searchId   String
  url        String
  siteName   String
  title      String?
  similarity Float
  status     String
  thumbnail  String?
  provider   String
  metadata   Json?
  detectedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  search     Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)

  @@index([searchId])
  @@index([status])
  @@index([similarity])
}

model ImageToken {
  id        String   @id @default(cuid())
  token     String   @unique
  searchId  String
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  search    Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String
  plan                 String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  priceId              String?
  amount               Int
  currency             String   @default("EUR")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  adminId    String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String   @default("general")
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomSearchRequest {
  id             String    @id @default(cuid())
  userId         String?
  email          String
  name           String?
  requestType    String    @default("manual_search")
  description    String
  urgencyLevel   String    @default("normal")
  targetSites    Json?
  imageHashes    Json?
  additionalInfo Json?
  estimatedCost  Float?
  priority       Int       @default(0)
  status         String    @default("waiting")
  adminNotes     String?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User?     @relation(fields: [userId], references: [id])
}

model SearchLog {
  id                  String   @id @default(cuid())
  searchId            String
  userId              String?
  email               String?
  imageStoragePath    String?
  imageHash           String?
  imageSize           Int?
  imageMimeType       String?
  ipAddress           String?
  userAgent           String?
  geoLocation         Json?
  searchType          String   @default("general_search")
  searchQuery         Json?
  providersAttempted  Json?
  providersSuccessful Json?
  providersFailed     Json?
  totalResults        Int      @default(0)
  searchTimeMs        Int?
  processingSteps     Json?
  errorLogs           Json?
  warnings            Json?
  apiCallsCount       Int      @default(0)
  status              String   @default("completed")
  createdAt           DateTime @default(now())
  search              Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  user                User?    @relation(fields: [userId], references: [id])
}

model Violation {
  id             String    @id @default(cuid())
  userId         String
  searchId       String?
  searchResultId String?
  title          String
  description    String?
  priority       String    @default("medium")
  status         String    @default("pending")
  category       String    @default("general")
  imageUrl       String?
  webPageUrl     String?
  siteName       String
  similarity     Float?
  provider       String?
  thumbnail      String?
  metadata       Json?
  actionsTaken   Json?
  evidence       Json?
  detectedAt     DateTime?
  resolvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
}
